{ 'upd': [ '"VERBOCITY_TRUE"']}
{ 'plt': [ '"VERBOCITY_FALSE"']}
{ 'anl': [ '"VERBOCITY_TRUE"']}
{ 'srt': [ '"VERBOCITY_TRUE"']}
{ 'dim_reduc': [ '"VERBOCITY_TRUE"']}
{ '-sort_params': [['L', 'q','T']]}
{ '-data_dir': ['dataset/dataset_May26_3pm/']}
{ '-dim_reduc_params': [['N',2,'N0',50,'perp',30.0,'pca',True]]}

# { 'T':np.array(list(np.linspace(2.25,0.92,16))+list(np.linspace(0.9,0.51,18))+list(np.linspace(0.5,0.25,16))) }
# { 'd': [2]}
# { 'q': [4,6,10]}
# { 'L': [40]}
# { 'Ne': [int(5e4)]}
# { 'Nm': [int(1e4)]}
# { 'Nf': [int(2e1)]}
# { 'Nr': [0.88]}
# { '-model_name': ['potts']}
# { 'alg': ['metropolis_wolff']}

def r(**kwargs):
	return '24h'
	# import numpy as np
	# from Model import Model
	
	# kwargs = kwargs.copy()
	
	# if kwargs.get('T'):
		# kwargs['T'] = Model(kwargs).T
	
	# # Ensure items are 1d
	# for k,v in kwargs.items():
		# if not isinstance(v,(str,dict,set,int,float)):
			# kwargs[k] = np.max(v)
		
	# Nm0 = 1e3
	# L0 = 8
	# T0 = 0/np.log(1.0+np.sqrt(kwargs['q']))
	# return '24h'
	# if  (kwargs['Nm']<Nm0) and (kwargs['L']<L0) and (kwargs['T']>T0):r= '24h'
	# elif(kwargs['Nm']<Nm0) and (kwargs['L']<L0) and (kwargs['T']<T0):r='24h'
	# elif(kwargs['Nm']<Nm0) and (kwargs['L']>L0) and (kwargs['T']>T0):r='24h'
	# elif(kwargs['Nm']<Nm0) and (kwargs['L']>L0) and (kwargs['T']<T0):r='24h'
	
	# elif(kwargs['Nm']>Nm0) and (kwargs['L']<L0) and (kwargs['T']>T0):r='20h'
	# elif(kwargs['Nm']>Nm0) and (kwargs['L']<L0) and (kwargs['T']<T0):r='20h'
	# elif(kwargs['Nm']>Nm0) and (kwargs['L']>L0) and (kwargs['T']>T0):r='24h'
	# elif(kwargs['Nm']>Nm0) and (kwargs['L']>L0) and (kwargs['T']<T0):r='24h'
	
	# else: r= ''
		
	# return

def memperproc_(**kwargs):
	return '5G'

def q(**kwargs):
	return 'serial'

def o(**kwargs):
	
	import numpy as np
	
	args = kwargs.copy()
	
	from data_functions import Data_Process
	from Model import Model
	
	props = {'data_name_format': ['-model_name','L','d','q','T','']}
	
	if args.get('-data_dir'):
		args['data_dir'] = args.pop('-data_dir')
	
	if args.get('T'):
		args['T'] = Model(args).T
		
	props.update(args)
	Data_Process().format(props)
	file = 'output_file'
	file += props['data_file']+'_'+ str(args.get('-job_id',0))
	
	return (file+'.txt').replace(' ','')
