{ 'T': np.linspace(2.5,0.2,10)}
{ 'q': [2,3,4,6,10]}
{ 'L': [6,10,15,20]}
{ 'Nb': [int(1e5)]}
{ 'Nm': [int(1e6)]}
{ 'Nf': [int(1e1)]}

def r(**kwargs):
	if   kwargs['Nm'] < 1e4 and kwargs['L'] < 12 and (
		 kwargs['T'] > 1.1/(1+np.sqrt(kwargs['q']))) : return '6h'
	elif kwargs['Nm'] < 1e4 and kwargs['L'] < 12 and (
		 kwargs['T'] < 1.1/(1+np.sqrt(kwargs['q']))) : return '10h'

	elif kwargs['Nm'] < 1e4 and kwargs['L'] > 12 and (
		 kwargs['T'] > 1.1/(1+np.sqrt(kwargs['q']))) : return '15h'
	elif kwargs['Nm'] < 1e4 and kwargs['L'] > 12 and (
		 kwargs['T'] < 1.1/(1+np.sqrt(kwargs['q']))) : return '20h'

	elif kwargs['Nm'] > 1e4 and kwargs['L'] < 12 and (
		 kwargs['T'] > 1.1/(1+np.sqrt(kwargs['q']))) : return '14h'
	elif kwargs['Nm'] > 1e4 and kwargs['L'] < 12 and (
		 kwargs['T'] < 1.1/(1+np.sqrt(kwargs['q']))) : return '24h'

	elif kwargs['Nm'] > 1e4 and kwargs['L'] > 12 and (
		 kwargs['T'] > 1.1/(1+np.sqrt(kwargs['q']))) : return '24h'
	elif kwargs['Nm'] > 1e4 and kwargs['L'] > 12 and (
		 kwargs['T'] < 1.1/(1+np.sqrt(kwargs['q']))) : return '24h
	else:
		return